// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
use risc0_zkvm::{default_prover, ExecutorEnv};
use zk_methods::ZKLOGIN_ID;
use risc0_zkvm::Receipt;

fn main() {
    // Let's impor the receipt that was generated by prove

    println!("this is verify zklogin");
    let receipt_path ="./receipt_zklogin.bin".to_string();
    let receipt_file = std::fs::read(receipt_path).unwrap();

    // As we has serialized the receipt we need to desrialize it
    let receipt = bincode::deserialize::<Receipt>(&receipt_file).unwrap();

    // 从 receipt 中读取结果
    let (iss, iat, exp): (String, u64, u64) = receipt.journal.decode().unwrap();

    // Let's print the results
    println!("iss: {}", iss);
    println!("iat: {}", iat);
    println!("exp: {}", exp);

    if iss != "https://accounts.google.com" {
        panic!("iss mismatch");
    }

    // if now time is greater than exp time then the token is expired
    let now = chrono::Utc::now().timestamp();
    println!("{}", now);
    if now > exp as i64 {
        panic!("Token is expired");
    }


	// Let's verify if the receipt that was generated was not created tampered with
    let _verification = match receipt.verify(ZKLOGIN_ID){
        Ok(()) => println!("Proof is Valid"),
        Err(_) => println!("Something went wrong !!"),
    };
}
