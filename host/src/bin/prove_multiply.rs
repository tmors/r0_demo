use risc0_zkvm::{default_prover, ExecutorEnv};

// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
use zk_methods::MULTIPLY_ELF;

fn main() {
    println!("this is prover multiply");

    let a: u64 = 12;
    let b: u64 = 4;

    let env = ExecutorEnv::builder()
        .write(&a).unwrap()
        .write(&b).unwrap()
        .build()
        .unwrap();

    // 获取 prover 并生成证明
    let prover = default_prover();
    let receipt = prover.prove(env, MULTIPLY_ELF).unwrap();
    // 获取计算结果
    let result: u64 = receipt.receipt.journal.decode().unwrap();

    let _output: u32 = receipt.receipt.journal.decode().unwrap();
    let serialized = bincode::serialize(&receipt.receipt).unwrap();

    // Writing the serialized contect to receipt.bin file
    let _saved_file = match std::fs::write("./receipt_multiply.bin", serialized) {
        Ok(()) => println!("Receipt saved and serialized as receipt.bin"),
        Err(_) => println!("Something went wrong !!"),

    };
    // 验证证明
    // receipt.receipt.verify(MULTIPLY_ID).unwrap();
}
